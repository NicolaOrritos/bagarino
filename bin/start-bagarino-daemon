#!/usr/bin/env node

/**
 * bin/start-bagarino-daemon
 */


// Everything above this line will be executed twice
require("daemon")();


var cluster = require("cluster");
var fs = require('fs');

console.log("Starting bagarino daemon...");


// Load and apply some bare-bones config:
var sjl = require("sjl");

var defaults = {"ENVIRONMENT": "development"};
var CONF = sjl("/etc/bagarino.conf", defaults);

process.env["NODE_ENV"] = CONF.ENVIRONMENT;


// Number of CPUs
var cpus = require("os").cpus().length;

function workerExitRoutine(code, signal)
{
    if (signal && signal !== 'SIGTERM')
    {
        console.log("Worker '%s' died with signal '%s' :(", this.id, signal);
        console.log("Restarting it...");


        // Replace the dead worker, we're not sentimental
        var worker = cluster.fork();
        
        worker.on("exit", workerExitRoutine);
    }
    else
    {
        console.log("Worker '%s' gracefully shut down with code '%d' :)", this.id, code);
    }
}

/**
 * Creates the children workers when running as cluster master.
 * Runs the HTTP server otherwise.
 * 
 * @param  {Number} count Number of workers to create.
 */
function createWorkers(count)
{
    if (cluster.isMaster)
    {
        // Write the PID file:
        var pid = process.pid.toString();
        
        fs.writeFile("/var/run/bagarino.pid", pid, function(err)
        {
            if (err)
            {
                console.log("Could not write PID file. Cause: %s", err);
            }
        });
        
        
        while (count-- > 0)
        {
            console.log("Creating worker #%d...", count);
            
            cluster.fork().on("exit", workerExitRoutine);
        }
    }
    else
    {
        // Run the bagarino server if running as worker
        require("../app");
    }
}

/**
 * Kills all workers with the given signal.
 * @param  {Number} signal
 */
function killAllWorkers(signal)
{
    var uniqueID = undefined;
    var worker = undefined;
    
    for (uniqueID in cluster.workers)
    {
        if (cluster.workers.hasOwnProperty(uniqueID))
        {
            worker = cluster.workers[uniqueID];
            
            worker.kill(signal);
        }
    }
}

/**
 * Restarts the workers.
 */
process.on("SIGHUP", function()
{
    killAllWorkers("SIGTERM");
    createWorkers(cpus);
});

/**
 * Gracefully Shuts down the workers.
 */
process.on("SIGTERM", function()
{
    killAllWorkers("SIGTERM");
});


// Create a child for each CPU
createWorkers(cpus);
